#!/bin/bash

REPO_ROOT=$(git rev-parse --show-toplevel)
source $REPO_ROOT/boilerplate/_lib/common.sh

usage() {
    cat <<EOF
$CMD SUBSCRIBER ...

Generate and propose a boilerplate update commit to one or more
subscribers.

Arguments:
    SUBSCRIBER  One or more subscriber repositories of the form
                "org/name" (e.g. "openshift/deadmanssnitch-operator");
                or the special keyword "ALL" to update all onboarded
                subscribers that need it.

Quirks and Limitations:
- Requires a functional and authenticated gh CLI, with git_protocol
  appropriately configured for however you push.
      gh config set git_protocol {ssh|https}
- For each subscriber we actually try to propose to, UPDATES YOUR FORK'S
  DEFAULT BRANCH to be in sync with upstream's.
- Is still slightly interactive, because 'gh pr create' likes to ask
  questions about your origin and upstream.
EOF
    exit -1
}

source $REPO_ROOT/boilerplate/_lib/subscriber.sh

# Arguments are required
[[ $# -eq 0 ]] && usage

declare -A to_update

ALL=0
if [[ $# -eq 1 ]] && [[ "$1" == ALL ]]; then
    ALL=1
    shift
fi
for subscriber in $(subscriber_list onboarded); do
    to_update[$subscriber]=$ALL
done

# Parse specified subscribers
for a in "$@"; do
    [[ $a == ALL ]] && err "Can't specify ALL with explicit subscribers"

    [[ -n "${to_update[$a]}" ]] || err "Not an onboarded subscriber: '$a'"
    if [[ "${to_update[$a]}" -eq 1 ]]; then
        echo "Ignoring duplicate: '$a'"
        continue
    fi
    to_update[$a]=1
done

TMPD=$(mktemp -d)
trap "rm -fr $TMPD" EXIT

propose_update() {
    local subscriber=$1
    local proj=${subscriber#*/}

    (
        # Clone my fork of the subscriber repo
        cd $TMPD
        # This
        # - uses the existing fork if one exists
        # - sets 'origin' and 'upstream' remotes
        gh repo fork $subscriber --clone=true --remote=true
        cd $proj

        # Current branch is 'master' or 'main'
        cur_branch=$(current_branch .)
        # Make sure our origin is synced with upstream, so our update
        # commit is based off of the latest code.
        # WARNING: This changes your fork!
        git pull upstream $cur_branch
        git push origin $cur_branch

        # Create the update commit
        make boilerplate-update
        make boilerplate-commit

        # And create the PR
        # TODO: This is interactive. How do we tell gh "Yes, please use
        # upstream as upstream and origin as origin?"
        gh pr create -f
    )
}

bp_master=$(git rev-parse master)

for subscriber in "${!to_update[@]}"; do
    [[ "${to_update[$subscriber]}" -eq 1 ]] || continue

    # Does this one need an update?
    lbc=$(last_bp_commit $subscriber)
    [[ -n "$lbc" ]] || err "No last-boilerplate-commit file for onboarded subscriber '$subscriber'"

    banner "Processing $subscriber"

    cbm=$(commits_behind_bp_master $lbc)
    if [[ $cbm -eq 0 ]]; then
        echo "Subscriber already up to date; skipping: '$subscriber'"
        continue
    fi

    # Is there already a PR proposed for this level?
    existing_pr=$(gh pr list --repo $subscriber | grep -P ":boilerplate-\S+-$bp_master\s")
    if [[ -n "$existing_pr" ]]; then
        echo "Subscriber '$subscriber' already has an open PR:"
        echo "https://github.com/$subscriber/pull/$existing_pr"
        continue
    fi

    # Pull the trigger
    propose_update "$subscriber"
done
