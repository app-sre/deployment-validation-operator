#!/bin/bash -e

REPO_ROOT=$(git rev-parse --show-toplevel)
source $REPO_ROOT/boilerplate/_lib/common.sh
source $REPO_ROOT/boilerplate/_lib/release.sh

cmd=${0##*/}

usage() {
    cat <<EOF
Usage: $cmd [PATH_TO_RELEASE_CLONE]

Creates a delta in $RELEASE_REPO requesting a codecov secret mapping for a
boilerplate consumer. Must be invoked from within a local clone of a repository
already subscribed to the $CONVENTION_NAME convention.

Parameters:
    PATH_TO_RELEASE_CLONE   File system path to a local clone of
                            https://github.com/$RELEASE_REPO. If not
                            specified, the repository will be cloned in a
                            temporary directory.
EOF
    exit -1
}

# Was a release repo clone specified?
release_process_args "$@"

release_validate_invocation

release_prep_clone

cd $RELEASE_CLONE

mapping_file=core-services/secret-mirroring/_mapping.yaml
secret_name=$CONSUMER_NAME-codecov-token

# TODO: Do some proper yaml validation and editing here.

# See if the mapping already exists. This ain't great: it assumes the
# lines are in a particular order, and doesn't check the namespaces. See
# TODO above :)
grep -B2 $secret_name $mapping_file && err "
Found existing mapping in $mapping_file
Nothing to do."

# Append it. This ain't great: it assumes the `secrets` top-level key is
# still in play, that we're matching whitespace, etc. See TODO above :)
cat <<EOF >> $mapping_file
- from:
    namespace: sd-sre-secrets
    name: $secret_name
  to:
    namespace: ci
    name: $secret_name
EOF

release_branch=$CONSUMER_ORG-$CONSUMER_NAME-$DEFAULT_BRANCH-boilerplate-$cmd

release_done_msg $release_branch
